{"version":3,"sources":["logo.svg","Canvas/Canvas.js","Canvas/CoordinateCanvas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","filledCircle","props","ctx","x","y","radius","color","beginPath","arc","Math","PI","fillStyle","fill","stroke","closePath","canvasElementOffsetLeft","canvasElementOffsetTop","prevX","prevY","Canvas","handleMouseDown","event","console","log","isMouseDown","canvasElement","document","getElementById","offsetLeft","offsetTop","pageX","width","pageY","height","handleMouseUp","handleMouseMove","refs","canvas","getContext","i","moveTo","lineTo","scale","rotate","state","this","updateCanvas","drawCoordinateLine","translate","clearRect","strokeStyle","t","save","setTransform","restore","Fragment","id","onMouseUp","onMouseDown","onMouseMove","ref","onClick","clearCanvas","class","style","fontSize","React","Component","to_image","dataURL","toDataURL","filename","value","length","data","a","createElement","href","download","body","appendChild","click","downloadImage","textareaStyle","border","borderRadius","backgroundColor","App","className","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6b1b344.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nimport styles from '../CSS/Button.module.css';\n\n// function outlinedRect(props) {\n//     const { ctx, x, y, width, height } = props;\n//     ctx.rect(x, y, width, height);\n//     ctx.stroke();\n// }\n\n// function filledRect(props) {\n//     const { ctx, x, y, width, height, color } = props;\n//     ctx.fillStyle = color;\n//     ctx.fillRect(x, y, width, height);\n// }\n\nfunction filledCircle(props) {\n    const { ctx, x, y, radius, color } = props;\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\n    ctx.fillStyle = color;\n    ctx.fill();\n    ctx.stroke();\n    ctx.closePath();\n}\n\n\nlet width = 800;\nlet height = 800;\nlet prevX = 0;\nlet prevY = 0;\n\nlet symmetry = 6;\nlet angle = 360 / symmetry;\n// let saveButton;\n// let clearButton;\n// let slider;\n// let xoff = 0;\n\nvar canvasElementOffsetLeft;\nvar canvasElementOffsetTop;\n\n\nclass Canvas extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {};\n        let isMouseDown = false;\n    }\n\n    componentDidMount() {\n        this.updateCanvas();\n        this.drawCoordinateLine();\n\n        var canvasElement = document.getElementById(\"canvas\");\n        canvasElementOffsetLeft = canvasElement.offsetLeft;\n        canvasElementOffsetTop = canvasElement.offsetTop;\n    }\n    componentDidUpdate() {\n        this.updateCanvas();\n    }\n    updateCanvas() {\n        const ctx = this.refs.canvas.getContext('2d');\n        ctx.translate(width / 2, height / 2);\n        ctx.clearRect(0, 0, 800, 800);\n\n        filledCircle({ ctx, x: 0, y: 0, radius: 400, color: \"#2B5F75\" });\n    }\n\n\n\n    drawCoordinateLine() {\n        const ctx = this.refs.canvas.getContext('2d');\n        ctx.strokeStyle = \"#FFFFFB\";\n\n        for (let i = 0; i < 3; i++) {\n            const coorLength = height / 20;\n            for (let t = 0; t < 20; t += 2) {\n                ctx.moveTo(0, height - coorLength * (t + 11.5));\n                ctx.lineTo(0, height - coorLength * (t + 10.5));\n            }\n\n            ctx.stroke();\n            ctx.rotate(Math.PI * 2 / symmetry);\n        }\n    }\n\n    handleMouseDown = (event) => {\n        console.log('mouse down');\n\n        this.isMouseDown = true;\n\n        // if window is resized\n        var canvasElement = document.getElementById(\"canvas\");\n        canvasElementOffsetLeft = canvasElement.offsetLeft;\n        canvasElementOffsetTop = canvasElement.offsetTop;\n\n        prevX = event.pageX - canvasElementOffsetLeft - width / 2;\n        prevY = event.pageY - canvasElementOffsetTop - height / 2;\n    }\n\n    handleMouseUp = (event) => {\n        console.log('mouse up');\n\n        this.isMouseDown = false;\n    }\n\n    handleMouseMove = (event) => {\n        // var x = event.clientX - width / 2;\n        // var y = event.clientY - height / 2;\n\n        var x = event.pageX - canvasElementOffsetLeft - width / 2;\n        var y = event.pageY - canvasElementOffsetTop - height / 2;\n\n\n\n        if (x > width / 2 - 10 || x < - width / 2 + 10 || y > height / 2 - 10 || y < - height / 2 + 10) {\n            this.isMouseDown = false;\n        }\n\n        const ctx = this.refs.canvas.getContext('2d');\n        if (this.isMouseDown) {\n\n            for (let i = 0; i < 6; i++) {\n\n                ctx.beginPath();\n                ctx.moveTo(prevX, prevY);\n                ctx.lineTo(x, y);\n                ctx.stroke();\n                ctx.closePath();\n                ctx.scale(-1, 1);\n                ctx.beginPath();\n                ctx.moveTo(prevX, prevY);\n                ctx.lineTo(x, y);\n                ctx.stroke();\n                ctx.closePath();\n                ctx.scale(-1, 1);\n\n                ctx.rotate(angle * Math.PI / 180);\n            }\n\n            prevX = x;\n            prevY = y;\n        }\n    }\n\n\n    clearCanvas() {\n        const ctx = document.getElementById(\"canvas\").getContext('2d');\n        // Store the current transformation matrix\n        ctx.save();\n\n        // Use the identity matrix while clearing the canvas\n        ctx.setTransform(1, 0, 0, 1, 0, 0);\n        ctx.clearRect(0, 0, width, height);\n\n        // Restore the transform\n        ctx.restore();\n\n        filledCircle({ ctx, x: 0, y: 0, radius: 400, color: \"#2B5F75\" });\n\n\n        ctx.strokeStyle = \"#FFFFFB\";\n\n        for (let i = 0; i < 3; i++) {\n            const coorLength = height / 20;\n            for (let t = 0; t < 20; t += 2) {\n                ctx.moveTo(0, height - coorLength * (t + 11.5));\n                ctx.lineTo(0, height - coorLength * (t + 10.5));\n            }\n\n            ctx.stroke();\n            ctx.rotate(Math.PI * 2 / symmetry);\n        }\n\n    }\n\n    render() {\n        const clearButtonStyle = {\n            // border: 0,\n            // borderRadius: '5px',\n            // backgroundColor: '#FFFFFF',\n            width: '200px',\n            height: '60px',\n            fontSize: '20px'\n        };\n\n        return (\n            <React.Fragment>\n                <canvas id='canvas' onMouseUp={this.handleMouseUp} onMouseDown={this.handleMouseDown} onMouseMove={this.handleMouseMove} ref=\"canvas\" width={width} height={height} />\n                <button onClick={this.clearCanvas} class=\"btn btn--stripe\" style={clearButtonStyle}>Clear Canvas</button>\n            </React.Fragment>\n        );\n    }\n}\n\nexport default Canvas;","import React from 'react';\r\n\r\nfunction filledCircle(props) {\r\n    const { ctx, x, y, radius, color } = props;\r\n    ctx.beginPath();\r\n    ctx.arc(x, y, radius, 0, 2 * Math.PI, false);\r\n    ctx.fillStyle = color;\r\n    ctx.fill();\r\n    ctx.stroke();\r\n    ctx.closePath();\r\n}\r\n\r\nlet width = 800;\r\nlet height = 800;\r\nlet prevX = 0;\r\nlet prevY = 0;\r\n\r\nlet symmetry = 6;\r\nlet angle = 360 / symmetry;\r\n// let saveButton;\r\n// let clearButton;\r\n// let slider;\r\n// let xoff = 0;\r\n\r\nclass CoordinateCanvas extends React.Component {\r\n    \r\n    componentDidMount() {\r\n        this.updateCanvas();\r\n        this.drawCoordinateLine();\r\n    }\r\n    componentDidUpdate() {\r\n        this.updateCanvas();\r\n    }\r\n    updateCanvas() {\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n        ctx.translate(width / 2, height / 2);\r\n        ctx.clearRect(0, 0, 800, 800);\r\n        \r\n        // filledRect({ ctx, x: 10 - width / 2, y: 10 - height / 2, width: 780, height: 780, color: \"#2C2C2C\" });\r\n        filledCircle({ ctx, x: 0, y: 0, radius: 400, color: \"#2C2C2C\" });\r\n    }\r\n    drawCoordinateLine() {\r\n        const ctx = this.refs.canvas.getContext('2d');\r\n        for (let i = 0; i < 6; i++) {\r\n            ctx.strokeStyle = \"#FFFFFB\";\r\n            ctx.moveTo(0, - height);\r\n            ctx.lineTo(0, height);\r\n            ctx.stroke();\r\n            ctx.rotate(angle * Math.PI / 180);\r\n        }\r\n    }\r\n\r\n    // handleMouseDown = (e) => {\r\n    //     console.log('mouse down');\r\n\r\n    //     this.isMouseDown = true;\r\n\r\n    //     prevX = e.clientX - width / 2\r\n    //     prevY = e.clientY - height / 2\r\n    // }\r\n\r\n    // handleMouseUp = (e) => {\r\n    //     console.log('mouse up');\r\n\r\n    //     this.isMouseDown = false;\r\n    // }\r\n\r\n    // handleMouseMove = (e) => {\r\n    //     var x = e.clientX - width / 2 ;\r\n    //     var y = e.clientY - height / 2 ;\r\n\r\n    //     if (x > width / 2 - 10 || x < - width / 2 + 10 || y > height / 2 - 10 || y < - height / 2 + 10) {\r\n    //         this.isMouseDown = false;\r\n    //     }\r\n\r\n    //     const ctx = this.refs.canvas.getContext('2d');\r\n    //     if (this.isMouseDown) {\r\n\r\n    //         for (let i = 0; i < 6; i++) {\r\n\r\n    //             ctx.beginPath();\r\n    //             ctx.moveTo(prevX, prevY);\r\n    //             ctx.lineTo(x, y);\r\n    //             ctx.stroke();\r\n    //             ctx.closePath();\r\n    //             ctx.scale(-1, 1);\r\n    //             ctx.beginPath();\r\n    //             ctx.moveTo(prevX, prevY);\r\n    //             ctx.lineTo(x, y);\r\n    //             ctx.stroke();\r\n    //             ctx.closePath();\r\n    //             ctx.scale(-1, 1);\r\n\r\n\r\n    //             // filledRect({ ctx, x: x, y: y, width: 5, height: 5, color: \"#FFFFFB\" });\r\n    //             // ctx.scale(-1, 1);\r\n    //             // filledRect({ ctx, x: x, y: y, width: 5, height: 5, color: \"#FFFFFB\" });\r\n    //             // ctx.scale(-1, 1);\r\n    //             ctx.rotate(angle * Math.PI / 180);\r\n    //         }\r\n\r\n    //         // drawLine({ ctx: ctx, x: x, y: y, prevX: prevX, prevY: prevY });\r\n    //         prevX = x;\r\n    //         prevY = y;\r\n    //     }\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <canvas id='coordinate-canvas' ref=\"canvas\" width={width} height={height} />\r\n        );\r\n    }\r\n}\r\n\r\nexport default CoordinateCanvas;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Canvas from './Canvas/Canvas';\nimport CoordinateCanvas from './Canvas/CoordinateCanvas';\nimport styles from './CSS/Button.module.css';\nimport './CSS/AwesomeHoverBtn.scss';\n\nlet test1 = 'Draw a snowflake    ';\nlet test2 = '画个雪花儿    ';\n\nfunction to_image() {\n  var canvas = document.getElementById(\"canvas\");\n  var dataURL = canvas.toDataURL(\"image/jpeg\", 1.0);\n  let filename = document.getElementById(\"filenameTextArea\").value;\n  if (filename.length === 0) {\n    filename = 'untitled';\n  }\n  downloadImage(dataURL, filename + '.jpeg');\n}\n\nfunction downloadImage(data, filename) {\n  var a = document.createElement('a');\n  a.href = data;\n  a.download = filename;\n  document.body.appendChild(a);\n  a.click();\n}\n\nconst textareaStyle = {\n  border: 0,\n  borderRadius: '5px',\n  backgroundColor: '#FFFFFF',\n  width: '200px',\n  height: '57px',\n  fontSize: '40px',\n};\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{\n      backgroundColor: '#6699A1'\n    }}>\n      <header className=\"containerH\">\n        <div className=\"containerV\">\n          <div className=\"Heading2\">{test1}</div>\n          <div className=\"Heading2\">{test2}</div>\n        </div>\n\n        <Canvas />\n\n\n\n\n      </header>\n      <div className=\"containerH\">\n\n        <div className=\"Heading2\" >起名儿: </div>\n        <textarea id='filenameTextArea' style={textareaStyle}></textarea>\n        <div className=\"spaceBar\"></div>\n        <div><button class=\"btn btn--stripe\" onClick={to_image}>Save as Image</button></div>\n\n      </div>\n\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Canvas from './Canvas/Canvas';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}